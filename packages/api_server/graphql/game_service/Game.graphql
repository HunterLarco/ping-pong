#import 'external/User.graphql'
#import 'external/IdentityCard.graphql'

type Game {
  id: ID!
  players: [Player!]!
  dateCreated: DateTime!
  dateStarted: DateTime
  dateEnded: DateTime
}

type Player {
  user: User!

  """
  Will only be populated if the actor requesting the Game object can view the
  assigned identity for this player.

  For example, when requesting a game object, you'll be able to see your
  identity and publically unveiled identities.
  """
  identity: IdentityCard

  state: PlayerState!
}

enum PlayerState {
  """
  State when a player is alive and the game is in progress.
  """
  Active

  """
  Indicates that a player is no playing in the game. Right now this has one way
  of getting set: they died.

  Note that dead != lost. For example, a guardian may die in a match but then
  later win because the Leader wins.
  """
  Inactive

  Won
  Lost
}

scalar DateTime
