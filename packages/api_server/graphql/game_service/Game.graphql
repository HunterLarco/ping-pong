#import 'external/User.graphql'
#import 'external/IdentityCard.graphql'

type Game {
  id: ID!
  players: [Player!]!

  """
  If the current user (aka viewer) is a player in this game, this will be true,
  otherwise false.
  """
  viewerIsParticipant: Boolean!

  dateCreated: DateTime!
  dateStarted: DateTime
  dateEnded: DateTime
}

type Player {
  user: User!

  """
  Will only be populated if the actor requesting the Game object can view the
  assigned identity for this player.

  For example, when requesting a game object, you'll be able to see your
  identity and publically unveiled identities.
  """
  identity: IdentityCard

  unveiled: Boolean!

  state: PlayerState!
}

enum PlayerState {
  """
  State when a player is alive and the game is in progress.
  """
  Active

  """
  Indicates that a player is no longer playing the game, but could still win.
  For example, a Guardian who lost when the Leader is still alive.
  """
  Inactive

  Won
  Lost
}

scalar DateTime
