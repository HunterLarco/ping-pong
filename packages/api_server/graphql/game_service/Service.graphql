#import 'Game.graphql';
#import 'GameEvent.graphql';

scalar Void

type Query {
  getGameById(id: ID!): Game
}

type Mutation {
  createGame: CreateGameResponse!
  joinGame(request: JoinGameRequest!): Void
  startGame(request: StartGameRequest!): StartGameResponse!

  """
  Unveils the authenticated user in the given game.
  """
  unveil(game: ID!): Void
}

type Subscription {
  spectate(request: SpectateRequest!): GameEvent!
}

### createGame

type CreateGameResponse {
  game: Game!

  """
  Auth token allowing the client to act as the host of this game. Should be
  stored locally, once lost it cannot be recovered.
  """
  authToken: ID!
}

### joinGame

input JoinGameRequest {
  """
  The ID of the game you'd like to join.
  """
  gameId: ID!
}

### startGame

input StartGameRequest {
  gameId: ID!
}

type StartGameResponse {
  game: Game!
}

### gameEvent

input SpectateRequest {
  """
  The ID of the game to subscribe to.
  """
  gameId: ID!
}
